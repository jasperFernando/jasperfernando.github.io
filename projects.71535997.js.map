{"mappings":"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","sources":["src/projects.js"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\nconst store = {\r\n    ww: window.innerWidth,\r\n    wh: window.innerHeight,\r\n    isDevice: navigator.userAgent.match(/Android/i) ||\r\n    navigator.userAgent.match(/webOS/i) ||\r\n    navigator.userAgent.match(/iPhone/i) ||\r\n    navigator.userAgent.match(/iPad/i) ||\r\n    navigator.userAgent.match(/iPod/i) ||\r\n    navigator.userAgent.match(/BlackBerry/i) ||\r\n    navigator.userAgent.match(/Windows Phone/i) };\r\n  \r\n  \r\n  class Slider {\r\n  \r\n    constructor(el, opts = {}) {\r\n      this.bindAll();\r\n  \r\n      this.el = el;\r\n  \r\n      this.opts = Object.assign({\r\n        speed: 2,\r\n        threshold: 50,\r\n        ease: 0.075 },\r\n      opts);\r\n  \r\n      this.ui = {\r\n        items: this.el.querySelectorAll('.js-slide'),\r\n        titles: document.querySelectorAll('.js-title'),\r\n        lines: document.querySelectorAll('.js-progress-line') };\r\n  \r\n  \r\n      this.state = {\r\n        target: 0,\r\n        current: 0,\r\n        currentRounded: 0,\r\n        y: 0,\r\n        on: {\r\n          x: 0,\r\n          y: 0 },\r\n  \r\n        off: 0,\r\n        progress: 0,\r\n        diff: 0,\r\n        max: 0,\r\n        min: 0,\r\n        snap: {\r\n          points: [] },\r\n  \r\n        flags: {\r\n          dragging: false } };\r\n  \r\n  \r\n  \r\n      this.items = [];\r\n  \r\n      this.events = {\r\n        move: store.isDevice ? 'touchmove' : 'mousemove',\r\n        up: store.isDevice ? 'touchend' : 'mouseup',\r\n        down: store.isDevice ? 'touchstart' : 'mousedown' };\r\n  \r\n  \r\n      this.init();\r\n    }\r\n  \r\n    bindAll() {\r\n      ['onDown', 'onMove', 'onUp'].\r\n      forEach(fn => this[fn] = this[fn].bind(this));\r\n    }\r\n  \r\n    init() {\r\n      return gsap.utils.pipe(\r\n      this.setup(),\r\n      this.on());\r\n  \r\n    }\r\n  \r\n    destroy() {\r\n      this.off();\r\n      this.state = null;\r\n      this.items = null;\r\n      this.opts = null;\r\n      this.ui = null;\r\n    }\r\n  \r\n    on() {\r\n      const { move, up, down } = this.events;\r\n  \r\n      window.addEventListener(down, this.onDown);\r\n      window.addEventListener(move, this.onMove);\r\n      window.addEventListener(up, this.onUp);\r\n    }\r\n  \r\n    off() {\r\n      const { move, up, down } = this.events;\r\n  \r\n      window.removeEventListener(down, this.onDown);\r\n      window.removeEventListener(move, this.onMove);\r\n      window.removeEventListener(up, this.onUp);\r\n    }\r\n  \r\n    setup() {\r\n      const { ww } = store;\r\n      const state = this.state;\r\n      const { items, titles } = this.ui;\r\n  \r\n      const {\r\n        width: wrapWidth,\r\n        left: wrapDiff } =\r\n      this.el.getBoundingClientRect();\r\n  \r\n      // Set bounding\r\n      state.max = -(items[items.length - 1].getBoundingClientRect().right - wrapWidth - wrapDiff);\r\n      state.min = 0;\r\n  \r\n      // Global timeline\r\n      this.tl = gsap.timeline({\r\n        paused: true,\r\n        defaults: {\r\n          duration: 1,\r\n          ease: 'linear' } }).\r\n  \r\n  \r\n      fromTo('.js-progress-line-2', {\r\n        scaleX: 1 },\r\n      {\r\n        scaleX: 0,\r\n        duration: 0.5,\r\n        ease: 'power3' },\r\n      0).\r\n      fromTo('.js-titles', {\r\n        yPercent: 0 },\r\n      {\r\n        yPercent: -(100 - 100 / titles.length) },\r\n      0).\r\n      fromTo('.js-progress-line', {\r\n        scaleX: 0 },\r\n      {\r\n        scaleX: 1 },\r\n      0);\r\n  \r\n      // Cache stuff\r\n      for (let i = 0; i < items.length; i++) {\r\n        const el = items[i];\r\n        const { left, right, width } = el.getBoundingClientRect();\r\n  \r\n        // Create webgl plane\r\n        const plane = new Plane();\r\n        plane.init(el);\r\n  \r\n        // Timeline that plays when visible\r\n        const tl = gsap.timeline({ paused: true }).\r\n        fromTo(plane.mat.uniforms.uScale, {\r\n          value: 0.65 },\r\n        {\r\n          value: 1,\r\n          duration: 1,\r\n          ease: 'linear' });\r\n  \r\n  \r\n        // Push to cache\r\n        this.items.push({\r\n          el, plane,\r\n          left, right, width,\r\n          min: left < ww ? ww * 0.775 : -(ww * 0.225 - wrapWidth * 0.2),\r\n          max: left > ww ? state.max - ww * 0.775 : state.max + (ww * 0.225 - wrapWidth * 0.2),\r\n          tl,\r\n          out: false });\r\n  \r\n      }\r\n    }\r\n  \r\n    calc() {\r\n      const state = this.state;\r\n      state.current += (state.target - state.current) * this.opts.ease;\r\n      state.currentRounded = Math.round(state.current * 100) / 100;\r\n      state.diff = (state.target - state.current) * 0.0005;\r\n      state.progress = gsap.utils.wrap(0, 1, state.currentRounded / state.max);\r\n  \r\n      this.tl && this.tl.progress(state.progress);\r\n    }\r\n  \r\n    render() {\r\n      this.calc();\r\n      this.transformItems();\r\n    }\r\n  \r\n    transformItems() {\r\n      const { flags } = this.state;\r\n  \r\n      for (let i = 0; i < this.items.length; i++) {\r\n        const item = this.items[i];\r\n        const { translate, isVisible, progress } = this.isVisible(item);\r\n  \r\n        item.plane.updateX(translate);\r\n        item.plane.mat.uniforms.uVelo.value = this.state.diff;\r\n  \r\n        if (!item.out && item.tl) {\r\n          item.tl.progress(progress);\r\n        }\r\n  \r\n        if (isVisible || flags.resize) {\r\n          item.out = false;\r\n        } else if (!item.out) {\r\n          item.out = true;\r\n        }\r\n      }\r\n    }\r\n  \r\n    isVisible({ left, right, width, min, max }) {\r\n      const { ww } = store;\r\n      const { currentRounded } = this.state;\r\n      const translate = gsap.utils.wrap(min, max, currentRounded);\r\n      console.log(translate);\r\n      const threshold = this.opts.threshold;\r\n      const start = left + translate;\r\n      const end = right + translate;\r\n      const isVisible = start < threshold + ww && end > -threshold;\r\n      const progress = gsap.utils.clamp(0, 1, 1 - (translate + left + width) / (ww + width));\r\n  \r\n      return {\r\n        translate,\r\n        isVisible,\r\n        progress };\r\n  \r\n    }\r\n  \r\n    clampTarget() {\r\n      const state = this.state;\r\n  \r\n      state.target = gsap.utils.clamp(state.max, 0, state.target);\r\n    }\r\n  \r\n    getPos({ changedTouches, clientX, clientY, target }) {\r\n      const x = changedTouches ? changedTouches[0].clientX : clientX;\r\n      const y = changedTouches ? changedTouches[0].clientY : clientY;\r\n  \r\n      return {\r\n        x, y, target };\r\n  \r\n    }\r\n  \r\n    onDown(e) {\r\n      const { x, y } = this.getPos(e);\r\n      const { flags, on } = this.state;\r\n  \r\n      flags.dragging = true;\r\n      on.x = x;\r\n      on.y = y;\r\n    }\r\n  \r\n    onUp() {\r\n      const state = this.state;\r\n  \r\n      state.flags.dragging = false;\r\n      state.off = state.target;\r\n    }\r\n  \r\n    onMove(e) {\r\n      const { x, y } = this.getPos(e);\r\n      const state = this.state;\r\n  \r\n      if (!state.flags.dragging) return;\r\n  \r\n      const { off, on } = state;\r\n      const moveX = x - on.x;\r\n      const moveY = y - on.y;\r\n  \r\n      if (Math.abs(moveX) > Math.abs(moveY) && e.cancelable) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n  \r\n      state.target = off + moveX * this.opts.speed;\r\n    }}\r\n  \r\n  \r\n  /***/\r\n  /*** GL STUFF ****/\r\n  /***/\r\n  \r\n  const backgroundCoverUv = `\r\n  vec2 backgroundCoverUv(vec2 screenSize, vec2 imageSize, vec2 uv) {\r\n    float screenRatio = screenSize.x / screenSize.y;\r\n    float imageRatio = imageSize.x / imageSize.y;\r\n  \r\n    vec2 newSize = screenRatio < imageRatio \r\n        ? vec2(imageSize.x * screenSize.y / imageSize.y, screenSize.y)\r\n        : vec2(screenSize.x, imageSize.y * screenSize.x / imageSize.x);\r\n  \r\n    vec2 newOffset = (screenRatio < imageRatio \r\n        ? vec2((newSize.x - screenSize.x) / 2.0, 0.0) \r\n        : vec2(0.0, (newSize.y - screenSize.y) / 2.0)) / newSize;\r\n  \r\n    return uv * screenSize / newSize + newOffset;\r\n  }\r\n  `;\r\n  \r\n  const vertexShader = `\r\n  precision mediump float;\r\n  \r\n  uniform float uVelo;\r\n  \r\n  varying vec2 vUv;\r\n  \r\n  #define M_PI 3.1415926535897932384626433832795\r\n  \r\n  void main(){\r\n    vec3 pos = position;\r\n    pos.x = pos.x + ((sin(uv.y * M_PI) * uVelo) * 0.125);\r\n  \r\n    vUv = uv;\r\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\r\n  }\r\n  `;\r\n  \r\n  const fragmentShader = `\r\n  precision mediump float;\r\n  \r\n  ${backgroundCoverUv}\r\n  \r\n  uniform sampler2D uTexture;\r\n  \r\n  uniform vec2 uMeshSize;\r\n  uniform vec2 uImageSize;\r\n  \r\n  uniform float uVelo;\r\n  uniform float uScale;\r\n  \r\n  varying vec2 vUv;\r\n  \r\n  void main() {\r\n    vec2 uv = vUv;\r\n  \r\n    vec2 texCenter = vec2(0.5);\r\n    vec2 texUv = backgroundCoverUv(uMeshSize, uImageSize, uv);\r\n    vec2 texScale = (texUv - texCenter) * uScale + texCenter;\r\n    vec4 texture = texture2D(uTexture, texScale);\r\n  \r\n    texScale.x += 0.15 * uVelo;\r\n    if(uv.x < 1.) texture.g = texture2D(uTexture, texScale).g;\r\n  \r\n    texScale.x += 0.10 * uVelo;\r\n    if(uv.x < 1.) texture.b = texture2D(uTexture, texScale).b;\r\n  \r\n    gl_FragColor = texture;\r\n  }\r\n  `;\r\n  \r\n  const loader = new THREE.TextureLoader();\r\n  loader.crossOrigin = 'Access-Control-Allow-Origin';\r\n  \r\n  class Gl {\r\n  \r\n    constructor() {\r\n      this.scene = new THREE.Scene();\r\n  \r\n      this.camera = new THREE.OrthographicCamera(\r\n      store.ww / -2,\r\n      store.ww / 2,\r\n      store.wh / 2,\r\n      store.wh / -2,\r\n      1,\r\n      10);\r\n  \r\n      this.camera.lookAt(this.scene.position);\r\n      this.camera.position.z = 1;\r\n  \r\n      this.renderer = new THREE.WebGLRenderer({\r\n        alpha: true,\r\n        antialias: true });\r\n  \r\n      this.renderer.setPixelRatio(1.5);\r\n      this.renderer.setSize(store.ww, store.wh);\r\n      this.renderer.setClearColor(0xffffff, 0);\r\n  \r\n      this.init();\r\n    }\r\n  \r\n    render() {\r\n      this.renderer.render(this.scene, this.camera);\r\n    }\r\n  \r\n    init() {\r\n      const domEl = this.renderer.domElement;\r\n      domEl.classList.add('dom-gl');\r\n      document.body.appendChild(domEl);\r\n    }}\r\n  \r\n  \r\n  class GlObject extends THREE.Object3D {\r\n  \r\n    init(el) {\r\n      this.el = el;\r\n  \r\n      this.resize();\r\n    }\r\n  \r\n    resize() {\r\n      this.rect = this.el.getBoundingClientRect();\r\n      const { left, top, width, height } = this.rect;\r\n  \r\n      this.pos = {\r\n        x: left + width / 2 - store.ww / 2,\r\n        y: top + height / 2 - store.wh / 2 };\r\n  \r\n  \r\n      this.position.y = this.pos.y;\r\n      this.position.x = this.pos.x;\r\n  \r\n      this.updateX();\r\n    }\r\n  \r\n    updateX(current) {\r\n      current && (this.position.x = current + this.pos.x);\r\n    }}\r\n  \r\n  \r\n  const planeGeo = new THREE.PlaneBufferGeometry(1, 1, 32, 32);\r\n  const planeMat = new THREE.ShaderMaterial({\r\n    transparent: true,\r\n    fragmentShader,\r\n    vertexShader });\r\n  \r\n  \r\n  class Plane extends GlObject {\r\n  \r\n    init(el) {\r\n      super.init(el);\r\n  \r\n      this.geo = planeGeo;\r\n      this.mat = planeMat.clone();\r\n  \r\n      this.mat.uniforms = {\r\n        uTime: { value: 0 },\r\n        uTexture: { value: 0 },\r\n        uMeshSize: { value: new THREE.Vector2(this.rect.width, this.rect.height) },\r\n        uImageSize: { value: new THREE.Vector2(0, 0) },\r\n        uScale: { value: 0.75 },\r\n        uVelo: { value: 0 } };\r\n  \r\n  \r\n      this.img = this.el.querySelector('img');\r\n      this.texture = loader.load(this.img.src, texture => {\r\n        texture.minFilter = THREE.LinearFilter;\r\n        texture.generateMipmaps = false;\r\n  \r\n        this.mat.uniforms.uTexture.value = texture;\r\n        this.mat.uniforms.uImageSize.value = [this.img.naturalWidth, this.img.naturalHeight];\r\n      });\r\n  \r\n      this.mesh = new THREE.Mesh(this.geo, this.mat);\r\n      this.mesh.scale.set(this.rect.width, this.rect.height, 1);\r\n      this.add(this.mesh);\r\n      gl.scene.add(this);\r\n    }}\r\n  \r\n  \r\n  /***/\r\n  /*** INIT STUFF ****/\r\n  /***/\r\n  \r\n  const gl = new Gl();\r\n  const slider = new Slider(document.querySelector('.js-slider'));\r\n  \r\n  const tick = () => {\r\n    gl.render();\r\n    slider.render();\r\n  };\r\n  \r\n  gsap.ticker.add(tick);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const store = {\r\n//     ww: window.innerWidth,\r\n//     wh: window.innerHeight,\r\n//     isDevice: navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i)\r\n// };\r\n\r\n// class Slider {\r\n//     constructor(el, opts = {}) {\r\n//         this.bindAll();\r\n//         this.el = el;\r\n//         this.opts = Object.assign({\r\n//             speed: 2,\r\n//             threshold: 50,\r\n//             ease: 0.075\r\n//         }, opts);\r\n//         this.ui = {\r\n//             items: this.el.querySelectorAll(\".js-slide\"),\r\n//             titles: document.querySelectorAll(\".js-title\"),\r\n//             lines: document.querySelectorAll(\".js-progress-line\")\r\n//         };\r\n//         this.state = {\r\n//             target: 0,\r\n//             current: 0,\r\n//             currentRounded: 0,\r\n//             y: 0,\r\n//             on: {\r\n//                 x: 0,\r\n//                 y: 0\r\n//             },\r\n//             off: 0,\r\n//             progress: 0,\r\n//             diff: 0,\r\n//             max: 0,\r\n//             min: 0,\r\n//             snap: {\r\n//                 points: []\r\n//             },\r\n//             flags: {\r\n//                 dragging: false\r\n//             }\r\n//         };\r\n//         this.items = [];\r\n//         this.events = {\r\n//             move: store.isDevice ? \"touchmove\" : \"mousemove\",\r\n//             up: store.isDevice ? \"touchend\" : \"mouseup\",\r\n//             down: store.isDevice ? \"touchstart\" : \"mousedown\"\r\n//         };\r\n//         this.init();\r\n//     }\r\n\r\n//     bindAll() {\r\n//         [\"onDown\", \"onMove\", \"onUp\"].forEach(fn => this[fn] = this[fn].bind(this));\r\n//     }\r\n\r\n//     init() {\r\n//         return gsap.utils.pipe(this.setup(), this.on());\r\n//     }\r\n\r\n//     destroy() {\r\n//         this.off();\r\n//         this.state = null;\r\n//         this.items = null;\r\n//         this.opts = null;\r\n//         this.ui = null;\r\n//     }\r\n\r\n//     on() {\r\n//         const {\r\n//             move,\r\n//             up,\r\n//             down\r\n//         } = this.events;\r\n//         window.addEventListener(down, this.onDown);\r\n//         window.addEventListener(move, this.onMove);\r\n//         window.addEventListener(up, this.onUp);\r\n//     }\r\n\r\n//     off() {\r\n//         const {\r\n//             move,\r\n//             up,\r\n//             down\r\n//         } = this.events;\r\n//         window.removeEventListener(down, this.onDown);\r\n//         window.removeEventListener(move, this.onMove);\r\n//         window.removeEventListener(up, this.onUp);\r\n//     }\r\n\r\n//     setup() {\r\n//         const {\r\n//             ww\r\n//         } = store;\r\n//         const state = this.state;\r\n//         const {\r\n//             items,\r\n//             titles\r\n//         } = this.ui;\r\n//         const {\r\n//             width: wrapWidth,\r\n//             left: wrapDiff\r\n//         } = this.el.getBoundingClientRect(); // Set bounding\r\n\r\n//         state.max = -(items[items.length - 1].getBoundingClientRect().right - wrapWidth - wrapDiff);\r\n//         state.min = 0; // Global timeline\r\n\r\n//         this.tl = gsap.timeline({\r\n//             paused: true,\r\n//             defaults: {\r\n//                 duration: 1,\r\n//                 ease: \"linear\"\r\n//             }\r\n//         }).fromTo(\".js-progress-line-2\", {\r\n//             scaleX: 1\r\n//         }, {\r\n//             scaleX: 0,\r\n//             duration: 0.5,\r\n//             ease: \"power3\"\r\n//         }, 0).fromTo(\".js-titles\", {\r\n//             yPercent: 0\r\n//         }, {\r\n//             yPercent: -(100 - 100 / titles.length)\r\n//         }, 0).fromTo(\".js-progress-line\", {\r\n//             scaleX: 0\r\n//         }, {\r\n//             scaleX: 1\r\n//         }, 0); // Cache stuff\r\n\r\n//         for (let i = 0; i < items.length; i++) {\r\n//             const el = items[i];\r\n//             const {\r\n//                 left,\r\n//                 right,\r\n//                 width\r\n//             } = el.getBoundingClientRect(); // Create webgl plane\r\n\r\n//             const plane = new Plane();\r\n//             plane.init(el); // Timeline that plays when visible\r\n\r\n//             const tl = gsap.timeline({\r\n//                 paused: true\r\n//             }).fromTo(plane.mat.uniforms.uScale, {\r\n//                 value: 0.65\r\n//             }, {\r\n//                 value: 1,\r\n//                 duration: 1,\r\n//                 ease: \"linear\"\r\n//             }); // Push to cache\r\n\r\n//             this.items.push({\r\n//                 el,\r\n//                 plane,\r\n//                 left,\r\n//                 right,\r\n//                 width,\r\n//                 min: left < ww ? ww * 0.775 : -(ww * 0.225 - wrapWidth * 0.2),\r\n//                 max: left > ww ? state.max - ww * 0.775 : state.max + (ww * 0.225 - wrapWidth * 0.2),\r\n//                 tl,\r\n//                 out: false\r\n//             });\r\n//         }\r\n//     }\r\n\r\n//     calc() {\r\n//         const state = this.state;\r\n//         state.current += (state.target - state.current) * this.opts.ease;\r\n//         state.currentRounded = Math.round(state.current * 100) / 100;\r\n//         state.diff = (state.target - state.current) * 0.0005;\r\n//         state.progress = gsap.utils.wrap(0, 1, state.currentRounded / state.max);\r\n//         this.tl && this.tl.progress(state.progress);\r\n//     }\r\n\r\n//     render() {\r\n//         this.calc();\r\n//         this.transformItems();\r\n//     }\r\n\r\n//     transformItems() {\r\n//         const {\r\n//             flags\r\n//         } = this.state;\r\n\r\n//         for (let i = 0; i < this.items.length; i++) {\r\n//             const item = this.items[i];\r\n//             const {\r\n//                 translate,\r\n//                 isVisible,\r\n//                 progress\r\n//             } = this.isVisible(item);\r\n//             item.plane.updateX(translate);\r\n//             item.plane.mat.uniforms.uVelo.value = this.state.diff;\r\n\r\n//             if (!item.out && item.tl) {\r\n//                 item.tl.progress(progress);\r\n//             }\r\n\r\n//             if (isVisible || flags.resize) {\r\n//                 item.out = false;\r\n//             } else if (!item.out) {\r\n//                 item.out = true;\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     isVisible({\r\n//         left,\r\n//         right,\r\n//         width,\r\n//         min,\r\n//         max\r\n//     }) {\r\n//         const {\r\n//             ww\r\n//         } = store;\r\n//         const {\r\n//             currentRounded\r\n//         } = this.state;\r\n//         const translate = gsap.utils.wrap(min, max, currentRounded);\r\n//         const threshold = this.opts.threshold;\r\n//         const start = left + translate;\r\n//         const end = right + translate;\r\n//         const isVisible = start < threshold + ww && end > -threshold;\r\n//         const progress = gsap.utils.clamp(0, 1, 1 - (translate + left + width) / (ww + width));\r\n//         return {\r\n//             translate,\r\n//             isVisible,\r\n//             progress\r\n//         };\r\n//     }\r\n\r\n//     clampTarget() {\r\n//         const state = this.state;\r\n//         state.target = gsap.utils.clamp(state.max, 0, state.target);\r\n//     }\r\n\r\n//     getPos({\r\n//         changedTouches,\r\n//         clientX,\r\n//         clientY,\r\n//         target\r\n//     }) {\r\n//         const x = changedTouches ? changedTouches[0].clientX : clientX;\r\n//         const y = changedTouches ? changedTouches[0].clientY : clientY;\r\n//         return {\r\n//             x,\r\n//             y,\r\n//             target\r\n//         };\r\n//     }\r\n\r\n//     onDown(e) {\r\n//         const {\r\n//             x,\r\n//             y\r\n//         } = this.getPos(e);\r\n//         const {\r\n//             flags,\r\n//             on\r\n//         } = this.state;\r\n//         flags.dragging = true;\r\n//         on.x = x;\r\n//         on.y = y;\r\n//     }\r\n\r\n//     onUp() {\r\n//         const state = this.state;\r\n//         state.flags.dragging = false;\r\n//         state.off = state.target;\r\n//     }\r\n\r\n//     onMove(e) {\r\n//         const {\r\n//             x,\r\n//             y\r\n//         } = this.getPos(e);\r\n//         const state = this.state;\r\n//         if (!state.flags.dragging) return;\r\n//         const {\r\n//             off,\r\n//             on\r\n//         } = state;\r\n//         const moveX = x - on.x;\r\n//         const moveY = y - on.y;\r\n\r\n//         if (Math.abs(moveX) > Math.abs(moveY) && e.cancelable) {\r\n//             e.preventDefault();\r\n//             e.stopPropagation();\r\n//         }\r\n\r\n//         state.target = off + moveX * this.opts.speed;\r\n//     }\r\n\r\n// }\r\n// /***/\r\n\r\n// /*** GL STUFF ****/\r\n\r\n// /***/\r\n\r\n\r\n// const backgroundCoverUv = `\r\n// vec2 backgroundCoverUv(vec2 screenSize, vec2 imageSize, vec2 uv) {\r\n// float screenRatio = screenSize.x / screenSize.y;\r\n// float imageRatio = imageSize.x / imageSize.y;\r\n\r\n// vec2 newSize = screenRatio < imageRatio \r\n// ? vec2(imageSize.x * screenSize.y / imageSize.y, screenSize.y)\r\n// : vec2(screenSize.x, imageSize.y * screenSize.x / imageSize.x);\r\n\r\n// vec2 newOffset = (screenRatio < imageRatio \r\n// ? vec2((newSize.x - screenSize.x) / 2.0, 0.0) \r\n// : vec2(0.0, (newSize.y - screenSize.y) / 2.0)) / newSize;\r\n\r\n// return uv * screenSize / newSize + newOffset;\r\n// }\r\n// `;\r\n// const vertexShader = `\r\n// precision mediump float;\r\n\r\n// uniform float uVelo;\r\n\r\n// varying vec2 vUv;\r\n\r\n// #define M_PI 3.1415926535897932384626433832795\r\n\r\n// void main(){\r\n// vec3 pos = position;\r\n// pos.x = pos.x + ((sin(uv.y * M_PI) * uVelo) * 0.125);\r\n\r\n// vUv = uv;\r\n// gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\r\n// }\r\n// `;\r\n// const fragmentShader = `\r\n// precision mediump float;\r\n\r\n// ${backgroundCoverUv}\r\n\r\n// uniform sampler2D uTexture;\r\n\r\n// uniform vec2 uMeshSize;\r\n// uniform vec2 uImageSize;\r\n\r\n// uniform float uVelo;\r\n// uniform float uScale;\r\n\r\n// varying vec2 vUv;\r\n\r\n// void main() {\r\n// vec2 uv = vUv;\r\n\r\n// vec2 texCenter = vec2(0.5);\r\n// vec2 texUv = backgroundCoverUv(uMeshSize, uImageSize, uv);\r\n// vec2 texScale = (texUv - texCenter) * uScale + texCenter;\r\n// vec4 texture = texture2D(uTexture, texScale);\r\n\r\n// texScale.x += 0.15 * uVelo;\r\n// if(uv.x < 1.) texture.g = texture2D(uTexture, texScale).g;\r\n\r\n// texScale.x += 0.10 * uVelo;\r\n// if(uv.x < 1.) texture.b = texture2D(uTexture, texScale).b;\r\n\r\n// gl_FragColor = texture;\r\n// }\r\n// `;\r\n// const loader = new THREE.TextureLoader();\r\n// loader.crossOrigin = \"anonymous\";\r\n\r\n// class Gl {\r\n//     constructor() {\r\n//         this.scene = new THREE.Scene();\r\n//         this.camera = new THREE.OrthographicCamera(store.ww / -2, store.ww / 2, store.wh / 2, store.wh / -2, 1, 10);\r\n//         this.camera.lookAt(this.scene.position);\r\n//         this.camera.position.z = 1;\r\n//         this.renderer = new THREE.WebGLRenderer({\r\n//             alpha: true,\r\n//             antialias: true\r\n//         });\r\n//         this.renderer.setPixelRatio(1.5);\r\n//         this.renderer.setSize(store.ww, store.wh);\r\n//         this.renderer.setClearColor(0xffffff, 0);\r\n//         this.init();\r\n//     }\r\n\r\n//     render() {\r\n//         this.renderer.render(this.scene, this.camera);\r\n//     }\r\n\r\n//     init() {\r\n//         const domEl = this.renderer.domElement;\r\n//         domEl.classList.add(\"dom-gl\");\r\n//         document.body.appendChild(domEl);\r\n//     }\r\n\r\n// }\r\n\r\n// class GlObject extends THREE.Object3D {\r\n//     init(el) {\r\n//         this.el = el;\r\n//         this.resize();\r\n//     }\r\n\r\n//     resize() {\r\n//         this.rect = this.el.getBoundingClientRect();\r\n//         const {\r\n//             left,\r\n//             top,\r\n//             width,\r\n//             height\r\n//         } = this.rect;\r\n//         this.pos = {\r\n//             x: left + width / 2 - store.ww / 2,\r\n//             y: top + height / 2 - store.wh / 2\r\n//         };\r\n//         this.position.y = this.pos.y;\r\n//         this.position.x = this.pos.x;\r\n//         this.updateX();\r\n//     }\r\n\r\n//     updateX(current) {\r\n//         current && (this.position.x = current + this.pos.x);\r\n//     }\r\n\r\n// }\r\n\r\n// const planeGeo = new THREE.PlaneBufferGeometry(1, 1, 32, 32);\r\n// const planeMat = new THREE.ShaderMaterial({\r\n//     transparent: true,\r\n//     fragmentShader,\r\n//     vertexShader\r\n// });\r\n\r\n// class Plane extends GlObject {\r\n//     init(el) {\r\n//         super.init(el);\r\n//         this.geo = planeGeo;\r\n//         this.mat = planeMat.clone();\r\n//         this.mat.uniforms = {\r\n//             uTime: {\r\n//                 value: 0\r\n//             },\r\n//             uTexture: {\r\n//                 value: 0\r\n//             },\r\n//             uMeshSize: {\r\n//                 value: new THREE.Vector2(this.rect.width, this.rect.height)\r\n//             },\r\n//             uImageSize: {\r\n//                 value: new THREE.Vector2(0, 0)\r\n//             },\r\n//             uScale: {\r\n//                 value: 0.75\r\n//             },\r\n//             uVelo: {\r\n//                 value: 0\r\n//             }\r\n//         };\r\n//         this.img = this.el.querySelector(\"img\");\r\n//         this.texture = loader.load(this.img.src, texture => {\r\n//             texture.minFilter = THREE.LinearFilter;\r\n//             texture.generateMipmaps = false;\r\n//             this.mat.uniforms.uTexture.value = texture;\r\n//             this.mat.uniforms.uImageSize.value = [this.img.naturalWidth, this.img.naturalHeight];\r\n//         });\r\n//         this.mesh = new THREE.Mesh(this.geo, this.mat);\r\n//         this.mesh.scale.set(this.rect.width, this.rect.height, 1);\r\n//         this.add(this.mesh);\r\n//         gl.scene.add(this);\r\n//     }\r\n\r\n// }\r\n// /***/\r\n\r\n// /*** INIT STUFF ****/\r\n\r\n// /***/\r\n\r\n\r\n// const gl = new Gl();\r\n// const slider = new Slider(document.querySelector(\".js-slider\"));\r\n\r\n// const tick = () => {\r\n//     gl.render();\r\n//     slider.render();\r\n// };\r\n\r\n// gsap.ticker.add(tick);\r\n\r\n\r\n// // jQuery\r\n// $('.slider__inner').imagesLoaded({\r\n//     // options here\r\n// }, function () {\r\n//     // do something after loaded\r\n// });\r\n\r\n// // Vanilla JavaScript\r\n// imagesLoaded(document.querySelector('.slider__inner'), {\r\n//     // options here\r\n// }, function () {\r\n//     // do something after loaded\r\n// });\r\n\r\n\r\n\r\n// $('#slid').imagesLoaded()\r\n//     .always(function (instance) {\r\n//         console.log('all images loaded');\r\n//     })\r\n//     .done(function (instance) {\r\n//         console.log('all images successfully loaded');\r\n//     })\r\n//     .fail(function () {\r\n//         console.log('all images loaded, at least one is broken');\r\n//     })\r\n//     .progress(function (instance, image) {\r\n//         var result = image.isLoaded ? 'loaded' : 'broken';\r\n//         console.log('image is ' + result + ' for ' + image.img.src );\r\n//     });\r\n\r\n\r\n// // jQuery\r\n// $('.slider__inner').imagesLoaded({\r\n//     background: true\r\n// }, function () {\r\n//     // do something after loaded\r\n// });\r\n\r\n// // Vanilla JavaScript\r\n// imagesLoaded(document.querySelector('.slider__inner'), {\r\n//     background: true\r\n// }, function () {\r\n//     // do something after loaded\r\n// });\r\n\r\n\r\n\r\n\r\n// // jQuery\r\n// $('.slider__inner').imagesLoaded()\r\n//     .always(function (instance) {\r\n//         // fired after all images are loaded\r\n//     })\r\n//     .done(function (instance) {\r\n//         // fired after all images are successfully loaded\r\n//     })\r\n//     .fail(function () {\r\n//         // fired after all images are loaded, at least one is broken\r\n//     })\r\n//     .progress(function (instance, image) {\r\n//         var result = image.isLoaded ? 'loaded' : 'broken';\r\n//         console.log('image is ' + result + ' for ' + image.img.src);\r\n//     });\r\n\r\n// // Vanilla JavaScript\r\n// imagesLoaded(document.querySelector('.slider__inner'))\r\n// on('always', function (instance) {\r\n//     // fired after all images are loaded\r\n// })\r\n// on('done', function (instance) {\r\n//     // fired after all images are successfully loaded\r\n// })\r\n// on('fail', function (instance) {\r\n//     // fired after all images are loaded, at least one is broken\r\n// })\r\n// on('progress', function (instance, image) {\r\n//     var result = image.isLoaded ? 'loaded' : 'broken';\r\n//     console.log('image is ' + result + ' for ' + image.img.src);\r\n// });\r\n\r\n\r\n\r\n\r\n"],"names":["$137178b23f2d55d0$var$store","ww","window","innerWidth","wh","innerHeight","isDevice","navigator","userAgent","match","THREE","TextureLoader","crossOrigin","Object3D","el1","this","el","resize","rect","getBoundingClientRect","left","top","width","height","pos","x","y","position","updateX","current","$137178b23f2d55d0$var$planeGeo","PlaneBufferGeometry","$137178b23f2d55d0$var$planeMat","ShaderMaterial","transparent","fragmentShader","vertexShader","$137178b23f2d55d0$var$Plane","$137178b23f2d55d0$var$GlObject","init","el2","super","geo","mat","clone","uniforms","uTime","value","uTexture","uMeshSize","Vector2","uImageSize","uScale","uVelo","img","querySelector","texture","$137178b23f2d55d0$var$loader","load","src","minFilter","LinearFilter","generateMipmaps","naturalWidth","naturalHeight","mesh","Mesh","scale","set","add","$137178b23f2d55d0$var$gl","scene","Scene","camera","OrthographicCamera","lookAt","z","renderer","WebGLRenderer","antialias","setPixelRatio","setSize","setClearColor","render","domElement","body","appendChild","domEl","$137178b23f2d55d0$var$slider","opts","bindAll","Object","assign","speed","threshold","ease","ui","items","querySelectorAll","titles","document","lines","state","target","currentRounded","on","off","progress","diff","max","min","snap","points","flags","dragging","events","move","up","down","forEach","fn","bind","gsap","utils","pipe","setup","destroy","addEventListener","onDown","onMove","onUp","removeEventListener","wrapWidth","wrapDiff","length","right","tl","timeline","paused","defaults","duration","fromTo","scaleX","yPercent","i","plane","push","out","calc","Math","round","wrap","transformItems","item","translate","isVisible","console","log","clamp","clampTarget","getPos","changedTouches","clientX","clientY","e","e1","moveX","moveY","abs","cancelable","preventDefault","stopPropagation","ticker"],"version":3,"file":"projects.71535997.js.map"}